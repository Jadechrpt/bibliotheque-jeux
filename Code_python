#Pac-man
# Import bibliothèque
import pygame
import sys
import time
import random

# Initialisation de Pygame
pygame.init()
#Partie texte :
# Initialisation du module de police
pygame.font.init()
# définition police et taille
font = pygame.font.Font(None, 50)  #(Police, Taille)
font_tf = pygame.font.Font(None, 25)  #(Police, Taille)

# Définir les textes
text_GO = "Game Over"

# Définir les couleurs :
noir = (0, 0, 0)
rouge = (255, 0, 0)
Rose_clair = (255, 192, 203)
Rose = (255, 105, 180)
Rose_vif = (255, 20, 147)

# Rendre le texte (convertir en surface)
text_surface_GO = font.render(text_GO, True, rouge)
#(text, andoucir, couleur)

# Obtenir le rectangle du texte pour le positionner
text_rect_GO = text_surface_GO.get_rect(center=(400, 300))  #(position, x, y)

# Définir les dimensions de la fenêtre + titre
screen = pygame.display.set_mode((800, 800))
pygame.display.set_caption('Pac Man')

# Chargement des images
Pac_man_image = pygame.image.load('Pac_man.png')
fantome_image = pygame.image.load('fantome.png')
obs_ver = pygame.image.load('barre_hor_100pix.png')
obs_hor = pygame.image.load('barre_vertical_100pix.png')
pièces_image = pygame.image.load('Pac_man.png')
vitamine_image = pygame.image.load('fantome.png')
bouton_play_image = 'bouton_play.png'

# déf tick
clock = pygame.time.Clock()

# Créer les classes Sprite:
#Pac_man
class Le_Pac_Man(pygame.sprite.Sprite):
    # Image de Pac_man + rect
    def __init__(self):
        super().__init__()
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(Pac_man_image, (50, 50))
        self.rect = self.image.get_rect()
        # définition de x et y + position de départ:
        self.initial_x = 33
        self.initial_y = 33
        self.rect.x = 33
        self.rect.y = 33
        self.vitesse = 2
        self.force = 0
        
# Classe pièce :
class pièces(pygame.sprite.Sprite):
    # Image de pièces + rect
    def __init__(self, position_x, position_y):
        super().__init__()
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(pièces_image, (20, 20))
        self.rect = self.image.get_rect()
        # définition de x et y + position de départ:
        self.rect.x = position_x
        self.rect.y = position_y

#Bonus :
#Classe 
class Vitamine(pygame.sprite.Sprite):
    def __init__(self, position_x, position_y):
        super().__init__()
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(vitamine_image, (20, 20))
        self.rect = self.image.get_rect()
        # définition de x et y + position de départ:
        self.rect.x = position_x
        self.rect.y = position_y

# classe : Les fantomes
class Les_fantomes(pygame.sprite.Sprite):
    # Image de fantome + rect
    def __init__(self, position_x, position_y):
        super().__init__()
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(fantome_image, (50, 50))
        self.rect = self.image.get_rect()
        # définition de x et y + position de départ:
        self.initial_x = position_x
        self.initial_y = position_y
        self.rect.x = position_x
        self.rect.y = position_y

        # Vitesse du fantome
        self.vitesse = 2
        self.speed_x = -self.vitesse
        self.speed_y = 0

        # Création de la variable d'activation
        self.active = False

        #intelligence du fantome
        self.intelligence = 0

    #Radar pour les obstacles verticaux    
    def Radar_ver(self, bordures_ver):
        # Réinitialise les radars pour chaque appel
        self.radar_ver_gauche = float('inf')
        self.radar_ver_droit = float('inf')
    
        for obstacle_ver in bordures_ver:
            # Vérifie si le fantôme et l'obstacle sont alignés verticalement
            if (self.rect.top < obstacle_ver.rect.bottom) and (self.rect.bottom > obstacle_ver.rect.top):
                # Calcul de la distance pour le côté gauche
                if self.rect.left > obstacle_ver.rect.right:  
                    distance_gauche = abs(self.rect.left - obstacle_ver.rect.right)
                    # Met à jour le radar si une plus petite distance est trouvée
                    if distance_gauche < self.radar_ver_gauche:
                        self.radar_ver_gauche = distance_gauche
            
                # Calcul de la distance pour le côté droit
                if self.rect.right < obstacle_ver.rect.left:  
                    distance_droite = abs(self.rect.right - obstacle_ver.rect.left)
                    # Met à jour le radar si une plus petite distance est trouvée
                    if distance_droite < self.radar_ver_droit:
                        self.radar_ver_droit = distance_droite

    #Radar pour les obstacles horizontaux  
    def Radar_hor(self, bordures_hor):
        # Réinitialise les radars pour chaque appel
        self.radar_hor_haut = float('inf')
        self.radar_hor_bas = float('inf')
    
        for obstacle_hor in bordures_hor:
            # Vérifie si le fantôme et l'obstacle sont alignés horizontalement
            if (self.rect.left < obstacle_hor.rect.right) and (self.rect.right > obstacle_hor.rect.left):
                # Calcul de la distance pour le haut
                if self.rect.top > obstacle_hor.rect.bottom:  
                    distance_haut = abs(self.rect.top - obstacle_hor.rect.bottom)
                    # Met à jour le radar si une plus petite distance est trouvée
                    if distance_haut < self.radar_hor_haut:
                        self.radar_hor_haut = distance_haut
            
                # Calcul de la distance pour le bas
                if self.rect.bottom < obstacle_hor.rect.top:  
                    distance_bas = abs(self.rect.bottom - obstacle_hor.rect.top)
                    # Met à jour le radar si une plus petite distance est trouvée
                    if distance_bas < self.radar_hor_bas:
                        self.radar_hor_bas = distance_bas


    def déplacement(self):
        # Radar Fantome
        self.Radar_ver(bordures_ver)
        self.Radar_hor(bordures_hor)
        
        # Déplacement du fantome
        
        # Verification des collisions avec la droite
        if self.speed_x > 0:
            if self.radar_ver_droit <=15 or self.rect.right > 785:
                self.speed_x = 0
                if (self.radar_hor_haut > 45 and self.rect.top > 45) and (self.radar_hor_bas > 45 and self.rect.bottom < 755) :
                    if self.intelligence == 1:
                        if Pac_man.rect.y < self.rect.y:
                            self.speed_y = -self.vitesse
                        else :
                            self.speed_y = self.vitesse
                    else :
                        self.direction = random.randint(1, 2)
                        if self.direction == 1:
                            self.speed_y = self.vitesse
                        else :
                            self.speed_y = -self.vitesse
                elif self.radar_hor_haut > 45 and self.rect.top > 45:
                    self.speed_y = -self.vitesse
                elif self.radar_hor_bas > 45 and self.rect.bottom < 755:
                    self.speed_y = self.vitesse
                else :
                    self.speed_x = -self.vitesse
                    
        # Verification des collisions avec la gauche

        if self.speed_x < 0:
            if self.radar_ver_gauche <=15 or self.rect.left < 15:
                self.speed_x = 0
                if (self.radar_hor_haut > 45 and self.rect.top > 45) and (self.radar_hor_bas > 45 and self.rect.bottom < 755) :
                    if self.intelligence == 1:
                        if Pac_man.rect.y < self.rect.y:
                            self.speed_y = -self.vitesse
                        else :
                            self.speed_y = self.vitesse
                    else :
                        self.direction = random.randint(1, 2)
                        if self.direction == 1:
                            self.speed_y = self.vitesse
                        else :
                            self.speed_y = -self.vitesse
                elif self.radar_hor_haut > 45 and self.rect.top > 45:
                    self.speed_y = -self.vitesse
                elif self.radar_hor_bas > 45 and self.rect.bottom < 755:
                    self.speed_y = self.vitesse
                else :
                    self.speed_x = self.vitesse
        # Verification des collisions avec le haut

        if self.speed_y < 0:
            if self.radar_hor_haut <=15 or self.rect.top < 15:
                self.speed_y = 0
                if (self.radar_ver_gauche > 45 and self.rect.left > 45) and (self.radar_ver_droit > 45 and self.rect.right < 755):
                    if self.intelligence == 1:
                        if Pac_man.rect.x < self.rect.x:
                            self.speed_x = -self.vitesse
                        else :
                            self.speed_x = self.vitesse
                    else :
                        self.direction = random.randint(1, 2)
                        if self.direction == 1:
                            self.speed_x = self.vitesse
                        else :
                            self.speed_x = -self.vitesse
                elif (self.radar_ver_gauche > 45 and self.rect.left > 45):
                    self.speed_x = -self.vitesse
                elif (self.radar_ver_droit > 45 and self.rect.right < 755) :
                    self.speed_x = self.vitesse
                else :
                    self.speed_y = self.vitesse
        # Verification des collisions avec le bas

        if self.speed_y > 0:
            if self.radar_hor_bas <=15 or self.rect.bottom > 785:
                self.speed_y = 0
                if (self.radar_ver_gauche > 45 and self.rect.left > 45) and (self.radar_ver_droit > 45 and self.rect.right < 755):
                    if self.intelligence == 1:
                        if Pac_man.rect.x < self.rect.x:
                            self.speed_x = -self.vitesse
                        else :
                            self.speed_x = self.vitesse
                    else :
                        self.direction = random.randint(1, 2)
                        if self.direction == 1:
                            self.speed_x = self.vitesse
                        else :
                            self.speed_x = -self.vitesse
                elif (self.radar_ver_gauche > 45 and self.rect.left > 45):
                    self.speed_x = -self.vitesse
                elif (self.radar_ver_droit > 45 and self.rect.right < 755) :
                    self.speed_x = self.vitesse
                else :
                    self.speed_y = -self.vitesse
                    
        # Déplacement du fantome
        self.rect.x += self.speed_x
        self.rect.y += self.speed_y
        
        
# Classe : Obstacle
class obstacle_hor():
    # Image de Obstacles_hor + rect
    def __init__(self, position):
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(obs_hor, (100, 15))
        self.rect = self.image.get_rect()
        self.rect.topleft = position
    def draw(self, screen):
        screen.blit(self.image, self.rect)
class obstacle_ver():
    # Image de obstacles verticaux + rect
    def __init__(self, position):
        # taille du sprite (image, largeur, hauteur)
        self.image = pygame.transform.scale(obs_ver, (15, 100))
        self.rect = self.image.get_rect()
        self.rect.topleft = position
    def draw(self, screen):
        screen.blit(self.image, self.rect)
            
# Créer une instance des sprites
Pac_man = Le_Pac_Man()
Fantome_groupe = [Les_fantomes(733,33), Les_fantomes(33,733), Les_fantomes(733,733)]
Fantome_groupe_actif = []
Fantome_groupe_absent = [Les_fantomes(33,33)]
bordures_hor = [
    obstacle_hor((300, 85)),
    obstacle_hor((400, 85)),
    obstacle_hor((600, 100)),
    obstacle_hor((100, 200)),
    obstacle_hor((200, 200)),
    obstacle_hor((400, 200)),
    obstacle_hor((500, 200)),
    obstacle_hor((700, 200)),
    obstacle_hor((200, 300)),
    obstacle_hor((300, 300)),
    obstacle_hor((500, 300)),
    obstacle_hor((600, 300)),
    obstacle_hor((700, 300)),
    obstacle_hor((200, 400)),
    obstacle_hor((300, 400)),
    obstacle_hor((400, 400)),
    obstacle_hor((700, 400)),
    obstacle_hor((100, 500)),
    obstacle_hor((300, 500)),
    obstacle_hor((500, 500)),
    obstacle_hor((0, 600)),
    obstacle_hor((500, 600)),
    obstacle_hor((100, 700)),
    obstacle_hor((400, 700)),
    obstacle_hor((600, 700))
]
bordures_ver = [
    obstacle_ver((500, 0)),
    obstacle_ver((100, 100)),
    obstacle_ver((100, 300)),
    obstacle_ver((100, 400)),
    obstacle_ver((100, 600)),
    obstacle_ver((200, 0)),
    obstacle_ver((200, 100)),
    obstacle_ver((200, 500)),
    obstacle_ver((300, 600)),
    obstacle_ver((300, 700)),
    obstacle_ver((385, 200)),
    obstacle_ver((400, 500)),
    obstacle_ver((500, 400)),
    obstacle_ver((500, 700)),
    obstacle_ver((600, 115)),
    obstacle_ver((600, 315)),
    obstacle_ver((600, 600)),
    obstacle_ver((700, 400)),
    obstacle_ver((700, 500))
]

pièces_groupe = pygame.sprite.Group()
pièces_mortes_groupe = pygame.sprite.Group()
for x in range(50, 751, 100):  # Boucle pour l'axe x
    for y in range(50, 751, 100):  # Boucle pour l'axe y
        pièce = pièces(x, y)
        pièces_groupe.add(pièce)  # Ajouter la pièce au groupe

vitamine_groupe = pygame.sprite.Group()
vitamine_mortes_groupe = pygame.sprite.Group()
position_possible_vitamine = []
for x in range(50, 751, 100):  # Boucle pour l'axe x
    for y in range(50, 751, 100):  # Boucle pour l'axe y
        position_possible_vitamine.append((x, y))
tuple_position_vitamine = random.randint(0, len(position_possible_vitamine))
vitamine_groupe.add(Vitamine(position_possible_vitamine[tuple_position_vitamine][0], position_possible_vitamine[tuple_position_vitamine][1]))


# Variable de vie
vie = 1

#Score
score = 0

#Définition image par seconde
frame_seconde =120

#Variable qui stock le temps en seconde * frame_seconde
temps =0

# Timer Fantome:
Timer_Fantome = 0

running = True


# Le Menu:
# Les classes du menu :
class Bouton(pygame.sprite.Sprite):
    def __init__(self, x, y, image_bouton, action, opacité):
        super().__init__()
        self.image = pygame.image.load(image_bouton).convert_alpha()  # Charge l'image du bouton
        self.image.set_alpha(opacité)#Pour pouvoir faire des buttons semi transparent 
        self.rect = self.image.get_rect()  # Récupère le rectangle de l'image pour faciliter les collisions
        self.rect.topleft = (x, y)  # Positionne le bouton à (x, y)
        self.action = action  # Fonction à appeler lors du clic

    def update(self):
        #Met à jour le bouton, vérifie si le clic est sur le bouton.
        # Vérifie si la souris est sur le bouton
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(pygame.mouse.get_pos()):
                self.action()
                
play = 0 
def play_on (): #Fonction qui lance le jeu (play est une condition au lancement du jeu, par défaut elle vaut 0)
    global play
    if play ==0:
        play =1
    elif play ==1:
        play =0


paramètre = 0
def open_paramètre ():
    global paramètre
    if paramètre == 0:
        paramètre=1
    elif paramètre==1:
        paramètre=0

difficulté = 0
def facile ():
    global difficulté
    difficulté = 0
    if len(Fantome_groupe) > 3:
        Fantome_groupe_absent.append(Fantome_groupe[3])
        Fantome_groupe.remove(Fantome_groupe[3])
    for Les_fantomes in Fantome_groupe:
        Les_fantomes.intelligence = 0
    print('facile')
    time.sleep(0.1)
def moyen ():
    global difficulté
    difficulté = 1
    if len(Fantome_groupe) < 4:
        for Les_fantomes in Fantome_groupe_absent:
            Fantome_groupe.append(Les_fantomes)
            Fantome_groupe_absent.remove(Les_fantomes)
    for Les_fantomes in Fantome_groupe:
        Les_fantomes.intelligence = 0
    Fantome_groupe[3].intelligence = 1
    print('moyen')
    time.sleep(0.1)
def difficile ():
    global difficulté
    difficulté = 2
    for Les_fantomes in Fantome_groupe:
        Les_fantomes.intelligence = 1
    print('difficile')
    time.sleep(0.1)


def restart ():
    global vie
    global score
    global temps
    global Timer_Fantome
    Pac_man.rect.x = Pac_man.initial_x
    Pac_man.rect.y = Pac_man.initial_y
    vie = 1
    score = 0
    temps = 0
    Timer_Fantome = 0
    for Les_fantomes in Fantome_groupe_actif:
        Les_fantomes.active = False
        Fantome_groupe.append(Les_fantomes)
    Fantome_groupe_actif.clear()
    for Les_fantomes in Fantome_groupe:
        Les_fantomes.rect.x = Les_fantomes.initial_x
        Les_fantomes.rect.y = Les_fantomes.initial_y
    if Fantome_groupe[0].rect.x == 33 and Fantome_groupe[0].rect.y == 33:
        Fantome_déplacé = Fantome_groupe.pop(0)
        Fantome_groupe.append(Fantome_déplacé)
        print(Fantome_groupe)
    for pièce in pièces_mortes_groupe:
        pièces_groupe.add(pièce)
        pièces_mortes_groupe.remove(pièce)
    for Vitamine in vitamine_mortes_groupe:
        vitamine_groupe.add(Vitamine)
        vitamine_mortes_groupe.remove(Vitamine)

Bouton_play = Bouton(300, 650, bouton_play_image, play_on, 255)
Bouton_paramètre = Bouton(600, 0, bouton_play_image, open_paramètre, 255)
Bouton_facile = Bouton(50, 500, bouton_play_image, facile, 255)
Bouton_difficile = Bouton(550, 500, bouton_play_image, difficile, 255)
Bouton_moyen = Bouton(300, 500, bouton_play_image, moyen, 255)
Bouton_play_bis = Bouton(600, 714, bouton_play_image, play_on, 28)

Bouton_groupe_menu = pygame.sprite.Group(Bouton_play, Bouton_paramètre)
Bouton_groupe_paramètre = pygame.sprite.Group(Bouton_play, Bouton_paramètre, Bouton_facile, Bouton_moyen, Bouton_difficile)
Bouton_groupe_level = pygame.sprite.Group(Bouton_play_bis)

# Boucle principale du menu
while running == True:
    for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                
    while play != 1 and running == True and paramètre != 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        screen.fill((255, 255, 255))
        Bouton_groupe_menu.draw(screen)
        Bouton_groupe_menu.update()
        pygame.display.flip()

    time.sleep(0.3)


    while play != 1 and running == True and paramètre == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        screen.fill((0, 0, 0))
        Bouton_groupe_paramètre.draw(screen)
        Bouton_groupe_paramètre.update()
        pygame.display.flip()

    time.sleep(0.3)

    # Boucle principale du jeu

    while vie==1 and running == True and score != 64*50 and play == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False


        # Mouvement Pac_man
        keys = pygame.key.get_pressed()
        # Sauvegarde la position initiale avant le déplacement
        ancienne_position = Pac_man.rect.copy()

        # Essaye de déplacer Pac_man
        if keys[pygame.K_LEFT] and Pac_man.rect.left > 0:
            Pac_man.rect.move_ip(-Pac_man.vitesse, 0)
        if keys[pygame.K_RIGHT] and Pac_man.rect.right < 800:
            Pac_man.rect.move_ip(Pac_man.vitesse, 0)
        if keys[pygame.K_UP] and Pac_man.rect.top > 0:
            Pac_man.rect.move_ip(0, -Pac_man.vitesse)
        if keys[pygame.K_DOWN] and Pac_man.rect.bottom < 800:
            Pac_man.rect.move_ip(0, Pac_man.vitesse)

        # Vérifier les collisions avec les obstacles horizontaux
        for obstacle_hor in bordures_hor:
            if Pac_man.rect.colliderect(obstacle_hor.rect):
                Pac_man.rect = ancienne_position
                break

        # Verifier la collisions avec les obstacles verticaux
        for obstacle_ver in bordures_ver:
            if Pac_man.rect.colliderect(obstacle_ver.rect):
                Pac_man.rect = ancienne_position
                break       
                    
        # Vérifier si un clic de souris est détecté
        if event.type == pygame.MOUSEBUTTONDOWN:
            # Obtenir les coordonnées de la souris
            x, y = pygame.mouse.get_pos()
            print(f"Coordonnées de la souris : x = {x}, y = {y}")
            
        # Text Score:
        score_text = f"Score: {score}"
        text_surface_sc = font.render(score_text, True, noir)
        text_rect_sc = text_surface_sc.get_rect(topleft=(0, 0))

        # Text timer_fantome
        if len(Fantome_groupe)>0:
            timer_fantome_text = f"Temps avant le prochain fantome : {int((Timer_Fantome-temps)/frame_seconde+1)}"
            text_surface_tf = font_tf.render(timer_fantome_text, True, rouge)
            text_rect_tf = text_surface_tf.get_rect(topright=(800, 0))
        
        # Gestion des collisions
        if pygame.sprite.spritecollide(Pac_man, Fantome_groupe_actif, False):
            vie = 0
            
        for pièce in pièces_groupe:
            if pièce.rect.colliderect(Pac_man.rect):
                pièces_mortes_groupe.add(pièce)
                pièces_groupe.remove(pièce)
                score += 50
                
        # Déplacement du fantome
        for Les_fantomes in Fantome_groupe_actif:
            Les_fantomes.déplacement()
                
        # Effacer l'écran en le remplissant de rose
        screen.fill((255, 192, 203))

        # Gestion de la vitamine
        for Vitamine in vitamine_groupe:
            if Vitamine.rect.colliderect(Pac_man.rect):
                vitamine_mortes_groupe.add(Vitamine)
                vitamine_groupe.remove(Vitamine)
                Pac_man.force = 1
                temps_force = temps

        if Pac_man.force == 1 :
            if (temps-temps_force)/frame_seconde > 10:
                Pac_man.force = 0

        #Augmentation du temps
        temps += 1

        #Activation des fantomes:
        if temps > Timer_Fantome and len(Fantome_groupe)>0:
            Fantome_groupe[0].active = True
            Timer_Fantome += 5*frame_seconde
            

            #changement de liste pour les fantomes acifs        
            for Les_fantomes in Fantome_groupe:
                if Les_fantomes.active:  # Si le fantôme est actif
                    Fantome_groupe.remove(Les_fantomes)  # Retirer le fantôme de la liste originale
                    Fantome_groupe_actif.append(Les_fantomes)  # Ajouter le fantôme à la liste des actifs

        # Dessiner les obstacles verticaux
        for obstacle_ver in bordures_ver:
            obstacle_ver.draw(screen)

        # Dessiner les obstacles horizontaux
        for obstacle_hor in bordures_hor:
            obstacle_hor.draw(screen)
                  
        # Dessiner les pièces
        for pièce in pièces_groupe:
            screen.blit(pièce.image, pièce.rect)

        #Dessiner les vitamines
        for Vitamine in vitamine_groupe:
            screen.blit(Vitamine.image, Vitamine.rect)
        
        # Dessiner les sprite
        screen.blit(Pac_man.image, Pac_man.rect)

        for Les_fantomes in Fantome_groupe_actif:
            screen.blit(Les_fantomes.image, Les_fantomes.rect)

        # Dessiner le text
        screen.blit(text_surface_sc, text_rect_sc)#score
        
        if len(Fantome_groupe)>0:
            screen.blit(text_surface_tf, text_rect_tf)#temps avant le prochain fantome
            
        #Dessiner les boutons 
        Bouton_groupe_level.draw(screen)
        Bouton_groupe_level.update()
        
        # Mettre à jour l'affichage
        pygame.display.flip()

        # Limitation fps
        clock.tick(frame_seconde)

    # Quitter Pygame
    # Game Over
    if vie < 1:
        screen.blit(text_surface_GO, text_rect_GO)
        pygame.display.flip()
        time.sleep(3)
        restart()
        play = 0
    elif score == 64*50 :
        play = 0 # écrire un message de bravo ou autre
        restart()

    time.sleep(0.3)
# fermer le jeu
pygame.quit()
sys.exit()
